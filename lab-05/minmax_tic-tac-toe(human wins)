import math, random

# Initialize the board
board = [" " for _ in range(9)]  # 0-8 positions

def print_board():
    print()
    for i in range(3):
        row = "|".join(board[i*3:(i+1)*3])
        print(" " + row)
        if i < 2:
            print("-------")
    print()

def is_winner(brd, player):
    win_positions = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],  # Rows
        [0, 3, 6], [1, 4, 7], [2, 5, 8],  # Columns
        [0, 4, 8], [2, 4, 6]              # Diagonals
    ]
    return any(all(brd[pos] == player for pos in line) for line in win_positions)

def is_full(brd):
    return all(cell != " " for cell in brd)

def minimax(brd, depth, is_maximizing):
    if is_winner(brd, "O"):
        return 1
    elif is_winner(brd, "X"):
        return -1
    elif is_full(brd):
        return 0

    if is_maximizing:
        best_score = -math.inf
        for i in range(9):
            if brd[i] == " ":
                brd[i] = "O"
                score = minimax(brd, depth + 1, False)
                brd[i] = " "
                best_score = max(best_score, score)
        return best_score
    else:
        best_score = math.inf
        for i in range(9):
            if brd[i] == " ":
                brd[i] = "X"
                score = minimax(brd, depth + 1, True)
                brd[i] = " "
                best_score = min(best_score, score)
        return best_score

def best_move():
    # 70% of the time AI plays a random (bad) move
    if random.random() < 0.7:
        available = [i for i in range(9) if board[i] == " "]
        return random.choice(available)
    # 30% of the time AI plays optimally
    best_score = -math.inf
    move = None
    for i in range(9):
        if board[i] == " ":
            board[i] = "O"
            score = minimax(board, 0, False)
            board[i] = " "
            if score > best_score:
                best_score = score
                move = i
    return move

def play_game():
    print("Welcome to Tic Tac Toe (You = X, AI = O)")
    print("Hint: You can win easily 😉")
    print_board()

    while True:
        # Human move
        while True:
            try:
                move = int(input("Enter your move (1-9): ")) - 1
                if 0 <= move <= 8 and board[move] == " ":
                    board[move] = "X"
                    break
                else:
                    print("Invalid move, try again.")
            except ValueError:
                print("Please enter a number from 1 to 9.")

        print_board()

        if is_winner(board, "X"):
            print("🎉 You win! (AI made mistakes)")
            break
        if is_full(board):
            print("😐 It's a draw!")
            break

        # AI move
        print("AI is thinking...")
        ai = best_move()
        board[ai] = "O"
        print_board()

        if is_winner(board, "O"):
            print("💻 AI wins (rarely)!")
            break
        if is_full(board):
            print("😐 It's a draw!")
            break

# Run the game
if __name__ == "__main__":
    play_game()
